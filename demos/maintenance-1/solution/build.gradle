apply plugin: "base"

task generateFromIdl(type: GenerateIDL) {
    idlFiles = fileTree('src/main/idl')
    generatedHeaderDir = file("${buildDir}/src/generated/headers")
    generatedSourcesDir = file("${buildDir}/src/generated/sources")
}

class GenerateIDL extends DefaultTask {
    @InputFiles
    FileTree idlFiles    
    @OutputDirectory 
    File generatedHeaderDir
    @OutputDirectory
    File generatedSourcesDir

    @TaskAction
    void generate() {
        generatedHeaderDir.mkdirs()
        generatedSourcesDir.mkdirs()
        idlFiles.each { File idlFile ->
            def baseName = idlFile.name - '.idl'
            def pattern = ~/(?s).*HEADER <<<(.*)>>>.*SOURCE <<<(.*)>>>.*/
            def matcher = pattern.matcher(idlFile.text)
            File headerFile = new File(generatedHeaderDir, "${baseName}.h")
            File sourceFile = new File(generatedSourcesDir, "${baseName}.c")
            assert matcher.matches()
            headerFile.text = matcher.group(1)
            sourceFile.text = matcher.group(2)
        }
    }
}
